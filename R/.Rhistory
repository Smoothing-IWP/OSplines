local_poly
library(OSplines)
local_poly
global_poly
OSplines::local_poly_helper
library(OSplines)
library(tidyverse)
compute_post_fun
global_poly_helper
source("~/Documents/GitHub/OSplines/R/functions.R", echo=TRUE)
numeric(length = 10)
numeric(1,length = 10)
?numeric
numeric(length = 10) +1
?apply
parse_formula
parse_formula
parse_formula <- function(formula) {
components <- as.list(attributes(terms(formula))$ variables)
fixed_effects <- list()
rand_effects <- list()
# Index starts as 3 since index 1 represents "list" and
# index 2 represents the response variable
for (i in 3:length(components)) {
if (startsWith(toString(components[[i]]), "f,")) {
rand_effects[[length(rand_effects) + 1]] <- components[[i]]
} else {
fixed_effects[[length(fixed_effects) + 1]] <- components[[i]]
}
}
return(list(response = components[[2]], fixed_effects = fixed_effects, rand_effects = rand_effects))
}
parse_formula(y ~ x + f(s))
aaa <- parse_formula(y ~ x + f(s))
aaa$rand_effects
aaa$rand_effects[[1]]
aaa$rand_effects[[1]][1]
aaa$rand_effects[[1]][2]
aaa$rand_effects[[1]]
aaa$rand_effects[[1]]$s
aaa$rand_effects[[1]]$smoothing_Var
aaa$rand_effects[[1]]$smoothing_var
aaa <- parse_formula(y ~ x + f(smoothing_var = s))
aaa$rand_effects[[1]]
aaa$rand_effects[[1]]
aaa$rand_effects[[1]]$``
aaa$rand_effects[[1]]$smoothing_var
formula <- y~x + f(smoothing_var = s)
formula
components <- as.list(attributes(terms(formula))$ variables)
components
attributes(terms(formula))$ variables
attributes(terms(formula))$ variables
attributes(terms(formula))$ variables[1]
attributes(terms(formula))$ variables[2]
attributes(terms(formula))$ variables[3]
attributes(terms(formula))$ variables[4]
attributes(terms(formula))$ variables[4][1]
attributes(terms(formula))$ variables[4][[1]]
attributes(terms(formula))$ variables[4][[1]][1]
attributes(terms(formula))$ variables[4][[1]][2]
attributes(terms(formula))$ variables[4][[1]][3]
attributes(terms(formula))$ variables[4][[1]][2]
attributes(terms(formula))$ variables[4][[1]][[2]]
components
components[[4]]
components[[4]][[1]]
components[[4]][[2]]
components[[4]][[3]]
stop("")
stop("The covariate name must be specified as smoothing_var or x.")
formula <- y~x + f(smoothing_var = d)
formula[[1]]
formula[[2]]
formula[[3]]
parse_result <- parse_formula(formula)
parse_result
parse_result$rand_effects
parse_result$rand_effects[[1]]$smoothing_var
eval
formula <- y~x + f(smoothing_var = s, sd.prior = 2)
parse_result <- parse_formula(formula)
response_var <- parse_result$response
rand_effects <- parse_result$rand_effects
fixed_effects <- parse_result$fixed_effects
rand_effect = rand_effects[[1]]
rand_effect
eval(rand_effect$sd.prior)
rand_effect$sd.prior
formula <- y~x + f(smoothing_var = s, sd.prior = list(u = 1, alpha = 2))
rand_effects <- parse_result$rand_effects
parse_result <- parse_formula(formula)
rand_effects <- parse_result$rand_effects
rand_effect = rand_effects[[1]]
sd.prior <- eval(rand_effect$sd.prior)
sd.prior
length(rand_effects)
length(sd.prior)
sd.prior2 <- list(sd.prior$u)
sd.prior2
sd.prior2 <- list(u = sd.prior$u)
sd.prior2
as.numeric(sd.prior2)
sd.prior
sd.prior <- 1
sd.prior
if (length(sd.prior) == 1){
sd.prior <- list(prior = "exp", para = list(u = as.numeric(sd.prior), alpha = 0.5))
}
sd.prior
OSplines::covid_canada
OSplines::covid_canada[["t"]]
OSplines::covid_canada
mtcars
sort(mtcars, mpg)
sort(mtcars, by = mpg)
sort(mtcars, by = "mpg")
?sort
order(mtcars, by = "mpg")
order(mtcars, by = mpg)
newdata <- mtcars[order(mpg),]
newdata <- mtcars[order(mtcars$mpg),]
newdata
dplyr::arrange(mtcars, mpg)
sGPfit::compute_d_step_sGPsd
sGPfit::Compute_B_sB
sGPfit::Compute_B_sB
sGPfit::Compute_Q_sB
sGPfit::Compute_B_sB
debugSource("~/Documents/GitHub/OSplines/R/functions.R", echo=TRUE)
debugSource("~/Documents/GitHub/OSplines/R/functions.R", echo=TRUE)
k <- eval(rand_effect$k)
?nlminb()
nlminb
get_default_option_list_MCMC <- function(option_list = list()){
default_options <- list(chains = 1, cores = 1, init = "random", seed = 123)
for (name in required_names) {
if(! name %in% names(option_list)){
option_list[[name]] <- default_options[[name]]
}
}
option_list
}
get_default_option_list_MCMC(list(chains = 2))
get_default_option_list_MCMC <- function(option_list = list()){
default_options <- list(chains = 1, cores = 1, init = "random", seed = 123)
required_names <- names(default_options)
for (name in required_names) {
if(! name %in% names(option_list)){
option_list[[name]] <- default_options[[name]]
}
}
option_list
}
get_default_option_list_MCMC(list(chains = 2))
get_default_option_list_MCMC(list(chains = 3))
get_default_option_list_MCMC(list())
get_default_option_list_MCMC
get_default_option_list_MCMC
tmbstan::d
install.packages("tmbstan")
methods(class="stanfit").
methods(class="stanfit")
